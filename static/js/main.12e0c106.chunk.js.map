{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchBox/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","this","repository","id","name","React","Component","CardList","repositories","map","repo","key","SearchBox","placeholder","handleChange","type","onChange","App","state","query","fetch","then","resp","json","setState","searchedRepositories","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+UAuBeA,G,wDAlBb,WAAYC,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BACDC,KAAKH,MAAMI,WAAWC,GAAK,GAD1B,4BAIL,gCAAMF,KAAKH,MAAMI,WAAWE,KAA5B,U,GAbWC,IAAMC,YCgBVC,G,wDAfb,WAAYT,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKC,UAAU,aACZE,KAAKH,MAAMU,aAAaC,KAAI,SAACC,GAAD,OAC3B,kBAAC,EAAD,CAAMR,WAAYQ,EAAMC,IAAKD,EAAKP,a,GATrBE,IAAMC,YCQdM,G,MATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAChB,2BACEC,KAAK,SACLhB,UAAU,SACVc,YAAaA,EACbG,SAAUF,MC+BCG,G,wDAjCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXV,aAAc,GACdW,MAAO,IALG,E,gEASO,IAAD,OAClBC,MAAM,kEACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACb,GAAD,OAAkB,EAAKgB,SAAS,CAAEhB,sB,+BAGlC,IAAD,SACyBP,KAAKiB,MAA7BV,EADD,EACCA,aAAcW,EADf,EACeA,MAChBM,EAAuBjB,EAAakB,QAAO,SAAChB,GAAD,OAC/CA,EAAKN,KAAKuB,cAAcC,SAAST,EAAMQ,kBAEzC,OACE,oCACE,4CACA,kBAAC,EAAD,CACEd,YAAY,wBACZC,aAAc,SAACe,GAAD,OAAO,EAAKL,SAAS,CAAEL,MAAOU,EAAEC,OAAOC,WAEvD,kBAAC,EAAD,CAAUvB,aAAciB,S,GA5BdpB,IAAMC,YCOJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.12e0c106.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card.styles.css\";\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"card-container\">\n        <img\n          src={`https://robohash.org/${\n            this.props.repository.id % 10\n          }?set=set4&size=180x180`}\n        />\n        <h4> {this.props.repository.name} </h4>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nclass CardList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"card-list\">\n        {this.props.repositories.map((repo) => (\n          <Card repository={repo} key={repo.id} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default CardList;\n","import React from \"react\";\nimport \"./searchBox.styles.css\";\n\nconst SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    type=\"search\"\n    className=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n\nexport default SearchBox;\n","import React from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/searchBox/searchBox.component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      repositories: [],\n      query: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.github.com/users/yashkumarverma/repos?per_page=100\")\n      .then((resp) => resp.json())\n      .then((repositories) => this.setState({ repositories }));\n  }\n\n  render() {\n    const { repositories, query } = this.state;\n    const searchedRepositories = repositories.filter((repo) =>\n      repo.name.toLowerCase().includes(query.toLowerCase())\n    );\n    return (\n      <>\n        <h1>Github Repos</h1>\n        <SearchBox\n          placeholder=\"Search for repository\"\n          handleChange={(e) => this.setState({ query: e.target.value })}\n        />\n        <CardList repositories={searchedRepositories} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}